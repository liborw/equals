#!/usr/bin/env python

""" Equals a proof of concept

Usage:
    equals [options] <infile>
    equals [options] -

Options:
    -i, --in-place                  Edit file in place
    -o OUTFILE, --output OUTFILE    Output to a file
    -e, --edits

"""

import re
import subprocess
import fileinput
import sys
from docopt import docopt

TAG = '#='

def main():

    # output is same as infile when edit in place is specified
    if opt['--in-place']:
        opt['--output'] = opt['<infile>']

    # if input from stdin then output is to stdout
    if opt['<infile>'] == '-':
        opt['--output'] = None


    # read file into list of lines, without linebreaks
    lines = []
    with fileinput.input(files=[opt['<infile>']]) as f:
        for line in f:
            lines.append(line[:-1])

    # Add print after each line with tag
    new_lines = []
    for i, line in enumerate(lines):
        new_lines.append(line)
        if '#=' in line:
            index = line.index(TAG)
            line = 'print("_equals:", ' + str(i) + ',' + line[:index].strip() + ')'
            new_lines.append(line)

    # execute the modified code
    text = '\n'.join(new_lines)
    stdout, stderr = execute(text)

    # print error and exit if there is one
    if stderr:
        print("There was an error in the input:", file=sys.stderr)
        print(stderr, file=sys.stderr)
        return

    # process the output
    for out_line in stdout.split('\n'):
        if out_line.startswith('_equals:'):
            i, value = parse_output(out_line)
            lines[i] = add_value(lines[i], value, TAG)

    # output
    src = '\n'.join(lines)
    if opt['--output']:
        with open(opt['--output'], 'w') as f:
            f.write(src)
    else:
        print(src, end='')


def execute(text):

    process = subprocess.Popen(
            ['python'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
    )

    stdout, stderr = process.communicate(input=text.encode())

    return stdout.decode(), stderr.decode()


def parse_output(line):
    parts = line.split(' ')
    return int(parts[1]), int(parts[2])


def add_value(line, value, tag='#='):
    i = line.index(tag)
    return line[:(i+len(tag))] + " " + str(value)


if __name__ == "__main__":
    opt = docopt(__doc__)
    main()
