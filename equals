#!/usr/bin/env python

""" Equals a proof of concept

Usage:
    equals [options] <infile>
    equals [options] -

Options:
    -i, --in-place                  Edit file in place
    -o OUTFILE, --output OUTFILE    Output to a file
    -e, --edits
    -d, --debug
"""

import re
import subprocess
import fileinput
import sys
import logging
from docopt import docopt

TAG = '#='

def main():

    # output is same as infile when edit in place is specified
    if opt['--in-place']:
        opt['--output'] = opt['<infile>']

    # if input from stdin then output is to stdout
    if opt['<infile>'] == '-':
        opt['--output'] = None


    # read file into list of lines, without linebreaks
    lines = []
    with fileinput.input(files=[opt['<infile>']]) as f:
        for line in f:
            lines.append(line[:-1])

    lines_ = preprocess_python(lines)


    # execute the modified code
    text = '\n'.join(lines_)
    stdout, stderr = execute_python(text)

    # print error and exit if there is one
    if stderr:
        print("There was an error in the input:", file=sys.stderr)
        print(stderr, file=sys.stderr)
        return

    # post processing
    updates = postprocess_python(stdout.split('\n'))

    # edits
    if opt['--edits']:
        for edit in updates:
            print(edit)
        return

    # appli updates
    lines = apply_updates(lines, updates)

    # output
    src = '\n'.join(lines)
    if opt['--output']:
        with open(opt['--output'], 'w') as f:
            f.write(src)
    else:
        print(src, end='')


def execute_python(text: str):

    process = subprocess.Popen(
            ['python'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
    )

    stdout, stderr = process.communicate(input=text.encode())

    return stdout.decode(), stderr.decode()


def gen_print_line(expr: str, line: int, start: int, end: int=-1):

    if '=' in expr:
        parts = expr.split('=')
        expr = parts[1].strip()

    fmt_str = '_equals: {},{},{},{}'
    line = f"print('{fmt_str}'.format({line}, {start}, {end}, {expr}))"
    return line


def parse_print_output(s: str):

    s = s[len('_equals:'):].strip()
    p1, p2, p3, *rest = s.split(',')

    # parse int
    line, start, end = int(p1), int(p2), int(p3)

    # hacky solusion for , in a value
    value = ','.join(rest)

    return line, start, end, value


def preprocess_python(lines_in:list[str]):
    lines_out = []

    for i, line in enumerate(lines_in):
        lines_out.append(line)
        if TAG in line:
            start = line.index(TAG)
            expr = line[:start].strip()
            start = start + len(TAG)
            try:
                end = start + line[start:].index('#')
            except ValueError:
                end = -1
            line = gen_print_line(expr, i, start, end)
            lines_out.append(line)
    return lines_out


def postprocess_python(lines_in:list[str]):
    updates = []
    for line in lines_in:
        if line.startswith('_equals:'):
            updates.append(parse_print_output(line))
    return updates

def apply_updates(lines:list[str], updates:list):
    for update in updates:
        i, s, e, v = update
        line = lines[i]
        if e >= 0:
            lines[i] = line[:s] + " " + v + " " + line[e:]
        else:
            lines[i] = line[:s] + " " + v
    return lines

if __name__ == "__main__":
    opt = docopt(__doc__)
    log = logging.getLogger('equals')
    logging.basicConfig(level='DEBUG' if opt['--debug'] else 'INFO')
    main()
